%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 18.1.0
%%For: (Julia Leirado) ()
%%Title: (PEDALES VINILO DEFINITIVOS2.ai)
%%CreationDate: 2/10/2017 2:45 PM
%%Canvassize: 16383
%%BoundingBox: 29 26 336 97
%%HiResBoundingBox: 29.4691 26.5635 335.8821 96.5297
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 288.5 383.5 288.5 383.5
%AI3_TileBox: -18.36 -11.945 593.64 780.055
%AI3_DocumentPreview: None
%AI5_ArtSize: 595.28 841.89
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -132.5 399.5 2 1797 923 26 0 0 78 112 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 32 8
%%BeginData: 6016 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD1DFF7D52277DFF7D52FFFFFF52FF7D7D527DA8FFFFA852A852A8
%FFA852FFFFFFA87D52FD04FFA8525252A8A87D525252A85252527DFFFFA8
%7DA8FF7D7DFD06FF5252527DFFA852FFFF7D7DFD32FFA8527DA8527D7D7D
%FFFFA8527D7D7DA8527DFFFFA87DA85252FF7D7DA8FFFF7D5227A8FFFFFF
%7D7DA87D527D7DA8A8A87D7D7DA8277DFF7D277DFF7D52FD05FF7D52A8A8
%277D7D527DFF52A8FD32FF7D52FFFFFFA87D7DFFFFFF52A87DA8FF7D52FF
%FFA852A852277DA87DFFFFFF7D5227FD04FF7D7DFFFD057DA8A8FF52FFFF
%A852FF527D52FF7D7DFD04FFA852A8FFFFA8527D2752A87D7DFD32FF7D7D
%FD04FF7D7DFFFFA8527D7D525252A8FFFFA8FD047D52527DA8FFA8FD0452
%FFFFFF7D5252527DA85252527DA852A8FFA8527D527D52A8A852FD05FF27
%FFFFFFA87D527D52527D7DFD32FFA852FFFFA8527D7DFFFFFF52A87D7DA8
%FD04FFA852A852FF52527DFFFF7D52A85252FFFFFF7D52A8A8FF7D7DFD04
%FF52FFFFA8527D525252A87D7DFD04FFA87DA8FFFF7D527D7DFF27527DFD
%32FFA85252A8277D7D527D7D7D527D7D7DFD05FFA8527D52FFA8277DA8FF
%7D527D5252A8FFFF527DFFFFFF7D527D7DA87D527D7D277D277DFFA8527D
%527D7DA8FFFF7D527D7D27A8527DFF7D527DFD33FFA852527DFFA8527D52
%7D7DFF7DA8FD06FF7DFF7DFFFFA87DFFFFFF52527D7D7DFFFFA87DFFFFFF
%A87D527D52A87D7D527DA87DA8FFFF7D7D7D527D7DFFFFFF7D5252A8FFA8
%7DFFA87DA8FD34FFA8FD05FFA8FD17FFA8FD0BFFA8FD0FFFA8FD07FFA8FD
%07FFA8FDFCFFFDB5FFA8A8A8FD21FF7DA87DA87DFD29FFA87D7DA8A8FD28
%FF7DA8A87DFD20FF7DFD05A87DFD27FF7D7DA8FFA87DA8FD26FF7DA8FFFF
%A87DFD0AFFA8FD047DA8FD0EFFA87DA8A87D7DA87DA8FD25FFA87DFFA8A8
%FFFF7DA8FD04FFA87DA87DA87DA8FD19FFA87DFD04FF7DA8FD09FF7DA8FF
%A8FF7DA8FD0DFFA87D7DA8FFA87D7D7DFD25FFA87D7D7DA87DA87DA8FD04
%FF2752527D527D527DFD18FF7DA8FF7D7DA8FF7DFD09FF7DFD04FFA87DFD
%0CFFA87D7DA8FD04FF7D7DA8FD24FF7D7DA8FFFFFFA87D7DFFFFFF7D52A8
%A8277DA87D52FD0DFFA87DFD08FFA87DFFFD04A8FFA8A8FD08FFA8FFA87D
%FFA8A8FD0CFF7DA87DFD05FF7DA87DFD0DFFA8FFA8FD13FFA87D7DFD05FF
%7D7DA8FFFFA87D7D277D5252A8A8A8FD0BFFA8527D52FD07FF7DA8FFA87D
%A87DFFA87DFD08FF7DFF52A87DFF7DFD0CFF7D7D7DFD05FF7D7D7DFD0CFF
%7D52525227A8FD11FFA87D7DFD05FFA87D7DFFFF7D7D7DFFFFFF7D7D7DFD
%0AFF7DA852A87D527DA8A8FFFFFFA87DFFFFA87D7DFFFFFF7DFD07FFFD04
%A8FFA8FFA8FD0CFF7DA87DFD05FFA8A87DFD0BFF7D527DA87D7D52A8FD04
%FF7DA8FD08FFA8FF7DFF7DA8A8FFFFA87DFF7DFFFF527DFD05FFA852A8FD
%08FF7D7D52FD057D527DA8FFFF7D7DFFFFFFA8FD04FFA87DFD05FFA87DA8
%FF7DFF7DFF7DA8FD06FF7DA87DA852A8A87DFD05A87DA8A8A8FFFFFF7DA8
%FFFFA8FF7DA8A87D7D527DFF7DFFFFFF52A87DA8FFFFA8A87D7D527D7DA8
%FFFF52FD047DFFFF7DA87D27FD07FF527DFD04FFA8A8FFA87D7DA87D5252
%A87DA852FFFFFF7DFD0AFFA8FD04FFA87DA8FFA87D7DA8FFFF7D7DFFFFA8
%7D7DA87DA87DFFFFFFA8A87DA87DA87DFFA8A8FF7D7DA87D7D7DA87D7DFF
%FFA87D7DFFFFA8A8A87DFFFFFF7DA8FF7D7DA8A8FD0DFFA8FF7D7DFD07FF
%A852FD077DA8527D52527D7D527D7D277DFFFF7DA87DFD06FF52A87DFD04
%FF7DA8FFFFFFA8FD05FF7DA8FFA8A8FD10FFA87DA8A8FD0BFF7DA8FFFFA8
%7D7DA852FF7D7D7DA87DFD10FFA8A87D7DFD07FFA8527DA8FD06FF7D277D
%A8FFFFFF7D7D277DFFFF7DA852FD05FFA87D7DA8FFFFFFA87DA87DA8FD04
%FF7D7D7DFF7DFF7DA8A8FFA8FD0DFFA8A87DA8A8FFFFA8A8A87DA8FFFFA8
%7D7DFFFFA87DA87D52A8527D7DA87D7DA8A8FD08FFA8A8FFFFFF7DFF7D7D
%FD07FFA85252FD07FFA87D7DFD04FFA87D7D7DFFFFA87D52A8FD05FF527D
%7DFFFFFF7DA87DFF7DFD04FF7DA87DA87DA8FFFD047D527D7DFD04FFA87D
%A8FD04FF7DFF7D7D527D7DA8A8A87DA8FF7D525252FF52FF7D527DFF7D7D
%52FFA8A852FD047DFD04FF7D7D7DA8FFFF7DA8A852A8FD06FFFD047DA8A8
%FFA8A8A8FF7D7DFD04A87DA87DA8FFFF7DFF7DFD06FF7DA8A8FFFFA87DFF
%A8FFA8FD04FF7DFF7DFFA87DFD07FF7DA8FFFFA87DFF7DA8FFFFA8A8FD04
%FFA8FD05FF7DA87D7D527D7DA8FFFF7DA8FFA87DFD07FFA8A87DFFFFFF7D
%FFA8A8FFFF7DFFFF7D7DA8FD04FF7DFF7DA8FFFD067D27525252A8FF5252
%52277DFFA87DFFFFA8FFA8FFA8FFFFFF7DFFFF7DFFFF7DFF7DFD04FF7DA8
%7DA8FF7D7DFD06FF7DA8FFFF527D7D7D52FFFFFF7DFD0BFF7D7D527D7D7D
%FD04FF7DA87DFD0AFF7DFFFF277D7D7D27A8FF7DA8FF7DFF527D7D7D527D
%A87DFD07FFA852275252FFA8A8275227A8FFA8A8FFFFFF277D7D52A8FFFF
%A87DFF7DFFFFA87DA8FD04FF7DA87DFFFFFF7DFD06FFA8A8FFFFFFA8A8A8
%FFFFFFA8A8FD0CFFA8A8A8FD07FF7DFD0BFF7DFFFFFD06A8FF7DFFFF7D7D
%A852A8527DA87D7DFD08FF527D527DA8A87D52527DA8FF7DFD04FFA8527D
%7DFFFFFFA87DA87DA8A87DA8A8A87DA87DFD05A87D7DFD06FF7DA8FD09FF
%A87DFD22FF7DA8FF7DFFFFFF7DFFFF7DA8FF52527D7DA8A87DA8277DFD0B
%FF7DFFFFA87DFD04FFA87DFD0AFFA87DFFA8A87DFD07A87DA87DA87DA8FD
%07FFA87DFD09FF7DFD23FF7DA8A852A8FFFF7DA8A87DFFFFFF527D7DA87D
%7D52A8FD0CFFA87D7D52FD06FF7D7DA8FD06FFA87D7DFD19FFA87D7DA8FD
%06FFA87DA8FD23FF7D7D52A8FFFF7D7D7DFD05FFA8FFA8FFA8FD10FF7DFD
%09FF7D7D7DA87DA87D7DA8FD1BFFA8A87D7D7DA87D7D7DA8A8FD27FF7D7D
%7DA8FD27FFA8FFA8A8A8FD21FFA8A87DA8A8FD2BFFA8FD10FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (Flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Deform.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (PlanetX.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Vectorized Object) (Image Tracing) (Illustrator.exe)
%AI8_PluginGroupInfo
(Adobe Line Plugin Group) (Line artwork) (IdeaFileFormat.aip)
%AI8_PluginGroupInfo
(Adobe Sketch Plugin Group) (Sketch artwork) (IdeaFileFormat.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligraphicBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ Touch Calligraphic Brush/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(Touch Calligraphic Brush)
(1 0 24 100 100 0 0 2 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.75021 0.679683 0.670222 0.90164 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 -1 0 0 0 0 100 Lb
(Make2D::visible::lines) Ln
0 A
0 R
0.75021 0.679683 0.670222 0.90164 0 0 0 XA
1 J 1 j 1 w 4 M []0 d0 XR
72.4191 48.6234 m
72.4505 48.1785 72.4819 47.7337 72.5133 47.289 c
72.545 46.8407 72.9408 46.7833 73.1615 46.5364 c
73.3593 46.3151 72.7864 46.0018 72.7455 45.8387 c
72.6785 45.5719 72.6956 45.3402 72.7918 45.0841 c
73.1785 44.0551 72.9984 43.0364 73.0856 42.0111 c
73.1149 41.6675 72.8467 41.6641 72.6166 41.5835 c
72.3425 41.4873 72.7713 40.5768 72.7812 40.4282 c
72.8135 39.9369 72.7633 39.4722 72.6376 38.9972 c
72.3883 38.0564 72.2992 37.1116 72.2489 36.1475 c
72.201 35.2266 71.4606 35.0295 70.955 34.5499 c
70.6032 34.216 70.2431 34.4064 69.8753 34.394 c
69.3747 34.3769 68.9039 34.2631 68.427 34.1321 c
67.6674 33.9234 66.8783 33.872 66.1409 33.5343 c
65.2367 33.1204 64.4761 32.7385 64.0393 31.7285 c
63.6345 30.7927 63.8771 29.5552 62.4469 29.1984 c
61.3305 28.9198 60.367 29.2649 59.3328 29.4626 c
58.7733 29.5696 58.7269 29.9764 58.5869 30.4012 c
57.7583 32.915 56.4228 34.0573 53.8411 34.5751 c
52.9188 34.7603 52.0169 34.6245 51.1043 34.6322 c
50.5435 34.637 50.0018 34.2159 49.4328 34.7517 c
48.9191 35.2352 49.0867 35.809 48.983 36.3604 c
48.8888 36.8617 48.5238 37.2881 48.8378 37.8715 c
49.0282 38.2254 49.1663 38.542 49.0854 38.9687 c
49.0085 39.3731 48.8218 39.7276 48.6771 40.1025 c
48.5752 40.3662 47.6806 40.113 47.529 40.1113 c
47.1348 40.107 46.7407 40.1021 46.3465 40.0995 c
44.7838 40.0891 43.241 40.1613 41.6834 39.7996 c
40.7432 39.5813 39.8755 38.9198 39.0346 40.0031 c
38.9104 40.1632 38.9129 40.7349 38.6281 40.4499 c
38.5136 40.3356 38.3992 40.2212 38.2847 40.1068 c
37.6767 39.499 37.0824 40.2457 36.4654 39.9458 c
35.9758 39.708 35.7423 39.9771 35.4495 40.3114 c
35.2811 40.504 35.2078 40.6616 35.4009 40.8777 c
35.5716 41.0684 35.2234 41.0626 35.1301 41.1508 c
34.537 41.7115 33.9558 41.3618 33.3472 41.345 c
32.779 41.3295 32.2119 41.2998 31.6426 41.3203 c
31.3581 41.3306 31.0763 41.3532 30.7947 41.3965 c
30.6531 41.4182 30.513 41.4449 30.3736 41.4777 c
30.2369 41.5097 29.9691 41.3221 29.9691 41.5921 c
29.9691 41.6748 29.9691 41.7574 29.9691 41.8401 c
29.9691 42.0054 29.9691 42.1707 29.9691 42.336 c
29.9691 42.9975 29.9691 43.6587 29.9691 44.32 c
29.9691 44.9814 29.9691 45.6427 29.9691 46.3041 c
29.9691 46.7752 30.0223 47.1187 30.4873 47.3718 c
30.618 47.4429 31.48 47.8017 31.6476 47.6331 c
31.8462 47.4335 32.0037 47.551 32.1961 47.6532 c
32.3298 47.7241 32.3923 47.6521 32.4308 47.5248 c
32.5013 47.2917 32.6922 47.4848 32.8249 47.4785 c
32.969 47.4717 33.1132 47.4649 33.2573 47.4581 c
34.4708 47.401 34.8363 46.6906 35.4133 48.2524 c
35.4789 48.4299 35.4963 48.6298 35.7563 48.5872 c
36.1762 48.5182 36.596 48.4491 37.0159 48.3802 c
37.4455 48.3095 37.8751 48.2389 38.3047 48.1682 c
38.6443 48.1123 38.9954 47.6393 39.3212 48.1263 c
39.5044 48.4003 39.6877 48.6745 39.8709 48.9485 c
39.9604 49.0822 40.0261 49.2024 40.2197 49.2024 c
40.3895 49.2024 40.5591 49.2024 40.7289 49.2024 c
41.2518 49.2024 41.4171 48.6432 41.94 48.6432 c
42.2794 48.6432 42.6188 48.6432 42.9583 48.6432 c
44.3161 48.6432 45.6737 48.6432 47.0315 48.6432 c
47.5535 48.6432 48.0754 48.6432 48.5974 48.6432 c
48.7333 48.6432 48.9791 48.4516 48.9879 48.7102 c
49.0258 49.8279 48.8077 52.1829 49.2625 53.3237 c
49.6767 54.3621 52.6876 54.1315 53.3816 54.0658 c
54.4008 53.9693 55.3033 53.7536 56.2433 54.5102 c
56.6275 54.8194 57.0149 55.1177 57.3447 55.4922 c
57.7854 55.9927 57.9733 56.564 58.1628 57.1722 c
58.3016 57.6181 58.4405 58.0639 58.5793 58.5097 c
58.6147 58.6234 58.6965 58.6122 58.7893 58.6122 c
59.046 58.6122 59.3029 58.6122 59.5597 58.6122 c
60.0733 58.6122 60.587 58.6122 61.1005 58.6122 c
61.6142 58.6122 62.1278 58.6122 62.6415 58.6122 c
62.9903 58.6122 63.036 58.3867 63.0959 58.1116 c
63.255 57.3803 63.8012 54.5956 65.0488 54.7111 c
65.4379 54.7469 65.7073 54.5493 66.0203 54.404 c
66.4398 54.2094 66.8605 54.1086 67.3204 54.078 c
67.5644 54.0616 67.8021 54.3113 68.0531 54.0502 c
71.9827 54.3249 72.9459 52.088 72.406 48.5375 C
S
57.611 51.6056 m
58.0153 51.6325 58.4195 51.6596 58.8238 51.6867 c
59.4293 51.7272 59.6479 52.214 60.0519 52.4902 c
60.5397 52.8236 62.228 52.4896 62.6459 52.2023 c
63.0317 51.9371 63.3398 51.6416 63.8878 51.7461 c
64.1527 51.7967 64.5334 51.669 64.5334 52.1032 c
64.5334 52.2661 64.5334 52.4288 64.5334 52.5915 c
64.5334 53.4807 65.1103 54.4405 63.9335 55.0442 c
63.0426 55.501 62.1835 55.197 61.3094 55.2823 c
60.4311 55.3679 59.6482 55.8698 58.6709 55.4879 c
57.8295 55.1591 57.2001 54.5731 56.4979 54.0623 c
56.0221 53.7161 56.4499 53.405 56.6317 53.077 c
56.7408 52.8801 57.4389 52.1044 57.1883 51.7949 c
57.3293 51.7318 57.4701 51.6687 57.611 51.6056 C
s
334.5112 39.0434 m
334.6619 40.7033 334.9159 42.3485 335.1263 44 c
335.3375 45.6575 335.1751 47.3205 335.3821 48.978 c
334.6708 50.8719 334.2001 52.8339 333.5806 54.7531 c
332.7717 57.2583 332.7934 58.0752 332.6124 60.6659 c
332.5533 61.5107 332.4851 62.3548 332.4266 63.1996 c
332.3893 63.7382 331.9796 63.8872 331.6679 64.1727 c
331.1251 64.6703 330.6493 65.1215 329.8358 65.1892 c
329.0831 65.2519 328.3399 65.08 327.5854 65.4395 c
327.2426 65.603 326.9529 65.8025 326.5239 65.6906 c
325.6367 65.4591 324.7867 65.6052 323.9145 65.637 c
321.895 65.7107 319.9056 65.7808 317.8878 65.4175 c
316.7807 65.2183 315.692 65.3313 314.8548 64.2369 c
314.667 63.9917 314.4501 63.779 314.2268 63.5685 c
313.7079 63.0797 313.8132 62.5418 313.8045 61.9538 c
313.7827 60.4641 314.179 57.5398 313.36 56.0162 c
312.883 55.129 310.8916 51.6855 310.8914 50.5151 c
310.543 47.4969 311.4716 45.0527 312.6137 42.4235 c
312.9216 41.7146 312.7547 41.0332 312.7788 40.3334 c
312.8026 39.6318 312.8212 38.9302 312.848 38.2288 c
312.9019 36.8229 312.9572 35.463 313.4667 34.1049 C
S
133.037 66.1716 m
132.4364 66.1716 131.8359 66.1716 131.2354 66.1716 c
130.9353 66.1716 130.635 66.1716 130.3347 66.1716 c
128.765 66.1716 126.6262 65.5867 126.4712 63.6343 c
126.2668 61.0594 126.2788 58.4751 125.912 55.9057 c
125.7969 55.098 125.718 53.2768 124.7529 52.728 c
123.5123 52.0227 122.4031 51.1572 121.2869 50.2839 c
119.0069 48.4999 118.2903 46.2821 117.6271 43.6906 c
117.283 42.3456 116.4751 41.5722 115.4517 40.7747 c
114.2992 39.8769 113.7149 38.9281 113.5773 37.4504 c
113.3684 35.2058 113.6897 33.665 116.2644 33.4204 c
116.9548 33.3546 117.6416 33.3962 118.3304 33.3968 c
123.4976 33.4024 128.6648 33.4116 133.8319 33.4116 c
138.8658 33.4064 143.8988 33.3042 148.9336 33.3747 c
152.633 33.4264 152.9039 35.2101 152.3674 38.4327 c
152.1094 39.9826 150.9782 40.4883 149.9557 41.2873 c
148.8539 42.1484 148.546 43.2131 148.2643 44.4661 c
147.6659 47.1281 146.4969 48.9929 144.3147 50.6471 c
143.2627 51.4446 142.0906 52.0552 141.0559 52.8813 c
140.3991 53.4058 140.199 55.6754 140.1043 56.3034 c
139.1224 62.808 142.0935 66.1716 133.037 66.1716 C
s
108.2485 91.5494 m
107.5823 94.6587 103.4173 95.314 101.3351 93.1078 c
99.576 91.2438 99.5365 86.9891 100.9127 84.9514 c
102.7485 82.2331 106.7038 82.7067 107.9826 85.6938 c
108.1943 86.1885 107.9331 87.0185 108.8292 87.0185 c
108.9979 87.0185 109.1665 87.0185 109.3352 87.0185 c
109.5037 87.0185 109.6724 87.0185 109.8412 87.0185 c
109.9254 87.0185 110.0097 87.0185 110.0941 87.0185 c
110.1151 87.0185 110.1362 87.0185 110.1573 87.0185 c
110.208 87.0185 110.1638 86.9685 110.1598 86.9425 c
110.1265 86.7296 110.0865 86.5183 110.0385 86.3081 c
109.9512 85.9275 109.8396 85.5579 109.6948 85.1948 c
109.2173 83.9978 108.5612 83.1499 107.4391 82.4798 c
104.8585 80.9391 101.5035 81.3133 99.5694 83.73 c
97.8697 85.8536 97.6719 89.5928 98.5578 92.0092 c
99.6631 95.0246 102.382 96.3744 105.4634 95.955 c
107.6623 95.6556 108.9511 94.8884 109.7568 92.7211 c
109.9043 92.3246 110.6202 91.5494 109.8372 91.5494 c
109.6606 91.5494 109.484 91.5494 109.3076 91.5494 c
108.9545 91.5494 108.6014 91.5494 108.2485 91.5494 C
s
114.244 83.6296 m
121.1736 83.6296 L
121.1736 81.9923 L
112.3973 81.9923 L
112.3973 95.6616 L
114.244 95.6616 L
114.244 83.6296 L
s
125.1137 81.9923 m
123.2667 81.9923 L
123.2667 95.6616 L
125.1137 95.6616 L
125.1137 81.9923 L
s
130.3105 89.341 m
132.0145 89.341 133.663 88.9092 135.4089 89.5549 c
137.02 90.1508 137.2826 92.9032 135.7585 93.731 c
134.8865 94.2046 131.5405 94.0814 130.6904 94.0814 c
129.7839 94.0814 130.3105 92.3746 130.3105 91.9011 c
130.3105 91.0477 130.3105 90.1944 130.3105 89.341 C
s
130.3105 81.9923 m
129.847 81.9923 129.3835 81.9923 128.9201 81.9923 c
128.2936 81.9923 128.464 82.5134 128.464 82.9267 c
128.464 83.8536 128.464 84.7807 128.464 85.7077 c
128.464 87.5616 128.464 89.4156 128.464 91.2695 c
128.464 92.1967 128.464 93.1236 128.464 94.0506 c
128.464 94.514 128.464 94.9775 128.464 95.441 c
128.464 95.9288 129.3772 95.6616 129.6338 95.6616 c
131.4876 95.6616 133.333 95.8297 135.1948 95.6314 c
139.542 95.1682 139.9607 88.7391 135.6612 87.8613 c
134.5587 87.6362 133.4766 87.7609 132.382 87.7609 c
132.0023 87.7609 131.6227 87.7609 131.243 87.7609 c
130.9097 87.7609 130.3105 88.1761 130.3105 87.5542 c
130.3105 85.7003 130.3105 83.8462 130.3105 81.9923 C
s
148.3947 81.9923 m
146.5477 81.9923 L
146.5477 95.6616 L
148.3947 95.6616 L
148.3947 81.9923 L
s
160.6163 95.6614 m
162.4061 95.6614 L
162.4061 81.9922 L
160.3307 81.9922 L
153.382 93.034 L
153.3438 93.034 L
153.3438 81.9922 L
151.5544 81.9922 L
151.5544 95.6614 L
153.7437 95.6614 L
160.5782 84.6196 L
160.6163 84.6196 L
160.6163 95.6614 L
s
176.3017 92.7106 m
176.3017 95.0626 172.6471 94.4914 173.3129 92.2356 c
173.444 91.7914 173.6761 91.4296 173.9521 91.0699 c
174.2059 90.7388 174.3722 90.1874 174.8952 90.5643 c
175.6783 91.1286 176.3017 91.5983 176.3017 92.7106 C
s
173.998 88.4464 m
172.8043 87.6867 171.6644 87.1811 171.6561 85.4365 c
171.6491 83.9423 173.031 83.0633 174.4082 83.1643 c
175.1175 83.2164 175.6969 83.4211 176.2698 83.8482 c
176.6673 84.1445 177.3404 84.3607 176.8518 84.9577 c
176.7496 85.0827 176.6474 85.2077 176.5452 85.3327 c
175.6961 86.3706 174.8471 87.4084 173.998 88.4464 C
s
181.4229 81.9923 m
181.0559 81.9923 180.6891 81.9923 180.3221 81.9923 c
180.1388 81.9923 179.9553 81.9923 179.7718 81.9923 c
179.5916 81.9923 179.4099 81.7994 179.2328 82.0162 c
179.0006 82.3003 178.7685 82.5843 178.5364 82.8685 c
178.4203 83.0105 178.3043 83.1526 178.1882 83.2947 c
178.1302 83.3657 178.0722 83.4368 178.0141 83.5077 c
177.9672 83.5652 177.9347 83.5056 177.9022 83.4693 c
177.7281 83.2744 177.5474 83.0877 177.3533 82.9125 c
176.9559 82.5535 176.5346 82.2714 176.036 82.067 c
174.0557 81.2548 171.213 81.6334 170.2789 83.8593 c
169.2293 86.3609 170.6182 88.1339 172.669 89.3588 c
173.4734 89.8393 172.4852 90.2935 172.2058 90.7188 c
171.9695 91.0785 171.7868 91.4416 171.6932 91.8682 c
171.3914 93.2438 171.616 94.1361 172.7723 95.0154 c
174.6667 96.456 177.71 95.6032 177.9102 93.0877 c
178.0251 91.6451 177.4668 90.8233 176.4148 89.9565 c
176.2107 89.7883 175.998 89.6327 175.7809 89.4818 c
175.6758 89.4086 175.3216 89.4346 175.4854 89.2394 c
175.5156 89.2035 175.5457 89.1677 175.5758 89.1318 c
175.6963 88.9883 175.8168 88.8449 175.9372 88.7014 c
176.1781 88.4145 176.4191 88.1276 176.66 87.8407 c
176.8778 87.5811 177.0958 87.3216 177.3138 87.0621 c
177.4227 86.9323 177.5316 86.8026 177.6405 86.6728 c
177.7411 86.5532 177.8917 86.1105 177.9935 86.393 c
178.154 86.838 178.2935 87.2854 178.3871 87.7505 c
178.437 87.9986 178.2139 88.4273 178.6665 88.4273 c
178.8359 88.4273 179.0053 88.4273 179.1747 88.4273 c
179.3442 88.4273 179.5137 88.4273 179.683 88.4273 c
180.2447 88.4273 180.042 87.9496 179.9675 87.5861 c
179.7828 86.6833 179.4701 85.8561 179.0399 85.0439 c
178.9659 84.904 179.0693 84.8418 179.1426 84.7532 c
179.2511 84.6217 179.3598 84.4903 179.4683 84.3588 c
179.6855 84.0959 179.9027 83.8328 180.1199 83.5699 c
180.5542 83.0441 180.9885 82.5183 181.4229 81.9923 C
s
190.616 89.341 m
192.32 89.341 193.9686 88.9092 195.7146 89.5549 c
197.3256 90.1508 197.5882 92.9032 196.064 93.731 c
195.192 94.2046 191.8461 94.0814 190.9959 94.0814 c
190.0895 94.0814 190.616 92.3746 190.616 91.9011 c
190.616 91.0477 190.616 90.1944 190.616 89.341 C
s
190.616 81.9923 m
190.1526 81.9923 189.6891 81.9923 189.2256 81.9923 c
188.5991 81.9923 188.7695 82.5134 188.7695 82.9267 c
188.7695 83.8536 188.7695 84.7807 188.7695 85.7077 c
188.7695 87.5616 188.7695 89.4156 188.7695 91.2695 c
188.7695 92.1967 188.7695 93.1236 188.7695 94.0506 c
188.7695 94.514 188.7695 94.9775 188.7695 95.4411 c
188.7695 95.9289 189.6828 95.6616 189.9395 95.6616 c
191.7933 95.6616 193.6386 95.8297 195.5005 95.6314 c
199.8476 95.1684 200.2662 88.7391 195.9667 87.8613 c
194.8643 87.6362 193.7822 87.7609 192.6876 87.7609 c
192.3079 87.7609 191.9283 87.7609 191.5485 87.7609 c
191.2153 87.7609 190.616 88.1761 190.616 87.5542 c
190.616 85.7003 190.616 83.8462 190.616 81.9923 C
s
211.5564 81.9923 m
201.4664 81.9923 L
201.4664 95.6616 L
211.4234 95.6616 L
211.4234 94.0242 L
203.3134 94.0242 L
203.3134 89.8359 L
210.7951 89.8359 L
210.7951 88.1985 L
203.3134 88.1985 L
203.3134 83.6296 L
211.5564 83.6296 L
211.5564 81.9923 L
s
215.915 83.5725 m
218.3766 83.5725 221.6802 82.7732 222.9729 86.0208 c
223.7954 88.0872 223.774 92.0738 221.5517 93.4963 c
220.2404 94.3355 218.9577 94.081 217.5964 94.081 c
217.2203 94.081 215.915 94.438 215.915 93.7309 c
215.915 93.0537 215.915 92.3764 215.915 91.6992 c
215.915 88.9903 215.915 86.2814 215.915 83.5725 C
s
214.0683 95.6616 m
216.9711 95.6616 222.2475 96.5878 224.3552 93.065 c
226.0595 90.2167 225.6616 84.8448 222.6661 82.8583 c
220.8713 81.668 219.1053 81.9923 217.2226 81.9923 c
216.288 81.9923 215.3533 81.9923 214.4187 81.9923 c
213.7166 81.9923 214.0683 82.6376 214.0683 83.044 c
214.0683 83.5113 214.0683 83.9786 214.0683 84.4459 c
214.0683 88.1845 214.0683 91.923 214.0683 95.6616 C
s
229.1068 85.9712 m
227.6788 81.9923 L
225.775 81.9923 L
230.915 95.6613 L
233.0093 95.6613 L
237.959 81.9923 L
235.9412 81.9923 L
234.5894 85.9712 L
229.1068 85.9712 L
s
233.923 87.6085 m
231.9054 93.6245 L
231.8669 93.6245 L
229.6776 87.6085 L
233.923 87.6085 L
s
241.4989 83.6296 m
248.4286 83.6296 L
248.4286 81.9923 L
239.6522 81.9923 L
239.6522 95.6616 L
241.4989 95.6616 L
241.4989 83.6296 L
s
261.4874 94.3858 m
258.2606 94.3858 256.7279 91.7387 256.7279 88.827 c
256.7279 85.9153 258.2604 83.2678 261.4874 83.2678 c
264.7142 83.2678 266.2468 85.9155 266.2468 88.827 c
266.2468 91.7386 264.714 94.3858 261.4874 94.3858 C
s
261.4874 81.6307 m
257.2353 81.6307 254.8241 84.787 254.8241 88.827 c
254.8241 92.8669 257.2353 96.0232 261.4874 96.0232 c
265.7396 96.0232 268.1503 92.8669 268.1503 88.827 c
268.1503 84.7872 265.7396 81.6307 261.4874 81.6307 C
s
279.4004 95.6614 m
281.1901 95.6614 L
281.1901 81.9922 L
279.1149 81.9922 L
272.1661 93.034 L
272.1283 93.034 L
272.1283 81.9922 L
270.3385 81.9922 L
270.3385 95.6614 L
272.5278 95.6614 L
279.3622 84.6196 L
279.4004 84.6196 L
279.4004 95.6614 L
s
135.5274 50.1018 m
130.3688 50.1018 L
130.3688 58.8331 L
135.5274 58.8331 L
135.5274 50.1018 L
s
126.5583 37.3386 m
121.3996 37.3386 L
121.3996 46.0699 L
126.5583 46.0699 L
126.5583 37.3386 L
s
143.8306 37.0501 m
138.672 37.0501 L
138.672 45.7814 L
143.8306 45.7814 L
143.8306 37.0501 L
s
196.1859 30.1514 m
194.8226 28.7427 193.2616 28.7009 191.5542 28.4938 c
190.258 28.3364 189.0215 27.985 187.7748 27.6333 c
184.1543 26.612 181.0967 27.0313 177.679 28.3518 c
177.0082 28.611 176.3517 28.7838 175.6212 28.7838 c
174.6302 28.7838 173.8127 29.1564 172.9467 29.5249 c
171.3164 30.2187 171.0521 30.3868 170.9384 32.219 c
170.8694 33.3312 170.7347 34.4366 170.6374 35.5458 c
170.5986 35.9887 170.2936 36.3319 170.3042 36.7972 c
170.3143 37.2442 170.342 37.6899 170.312 38.1383 c
170.2094 39.6708 170.1635 41.1716 169.6149 42.6587 c
169.153 43.9106 168.2043 43.6746 167.2055 43.6911 c
166.5354 43.702 165.9122 43.7546 165.2866 44.0563 c
164.9704 44.2087 165.2022 43.7165 165.2022 43.5364 c
165.2022 43.3393 165.2022 43.1423 165.2022 42.9453 c
165.2022 42.517 164.3949 42.7917 164.1737 42.7917 c
163.9767 42.7917 163.7795 42.7917 163.5825 42.7917 c
162.9455 42.7917 163.0597 43.2945 163.0576 43.7388 c
163.0566 43.9416 163.1647 44.2172 162.8444 44.2172 c
161.9933 44.2172 161.1738 44.6385 160.3641 43.8685 c
160.1583 43.6729 159.941 43.6806 159.6913 43.6806 c
159.4178 43.6806 159.3741 43.8885 159.2609 44.0577 c
159.1455 44.2301 158.9214 45.0926 158.5703 44.8908 c
158.0192 44.5743 157.5042 44.2726 156.8316 44.2295 c
156.3519 44.1989 156.0756 44.6312 155.5914 44.5915 c
155.1922 44.5589 154.8692 44.741 154.5109 44.8289 c
154.2101 44.9028 153.7018 44.6679 153.7018 45.2099 c
153.7018 45.3655 153.7018 45.5211 153.7018 45.6769 c
153.7018 45.9881 153.7018 46.2994 153.7018 46.6108 c
153.7018 47.2332 153.7018 47.8559 153.7018 48.4785 c
153.7018 48.7898 153.7018 49.101 153.7018 49.4124 c
153.7018 49.8968 153.6518 50.3207 154.251 50.4819 c
155.3744 50.7839 156.4491 50.7633 157.5813 50.6295 c
158.134 50.5641 158.7756 50.0163 159.1356 50.8458 c
159.2321 51.068 159.0473 51.5189 159.4871 51.4738 c
160.2592 51.3948 161.0313 51.3156 161.8034 51.2363 c
162.2647 51.189 162.8039 50.6882 163.1261 51.3854 c
163.2358 51.6234 163.3457 51.8612 163.4556 52.0991 c
163.6573 52.5358 164.0122 52.2385 164.3047 52.2504 c
164.7021 52.2662 164.9814 52.0102 165.3371 51.9393 c
166.0475 51.7974 166.788 52.2171 167.4781 51.5768 c
167.7782 51.2985 167.9171 51.7246 168.1373 51.7955 c
168.3778 51.8729 168.6136 51.9028 168.8653 51.8931 c
171.0292 51.8104 171.799 55.3605 172.1672 56.7097 c
172.9975 59.7531 173.8642 62.7027 175.5145 65.4646 c
176.0874 66.4236 176.7236 67.3415 177.3054 68.2946 c
177.5659 68.7213 177.6165 69.2469 178.1901 69.4914 c
178.6228 69.6758 179.0562 69.7981 179.5265 69.844 c
180.3303 69.9222 181.0116 69.5094 181.7906 69.508 c
183.204 69.5054 184.6175 69.5052 186.031 69.5052 c
186.8343 69.5052 187.5673 69.8542 188.3833 69.8082 c
189.0943 69.768 189.6991 69.691 190.262 69.158 c
190.7763 68.6709 190.9265 68.0229 191.2619 67.4574 c
192.5383 65.3059 193.6532 63.1075 194.5264 60.7561 c
195.2093 58.9178 195.4198 56.9638 196.1516 55.1354 c
196.916 53.2261 196.8852 51.2683 197.136 49.3127 c
197.6727 45.1252 197.3313 40.9665 197.3932 36.7925 c
197.4012 36.2442 197.2717 35.735 197.1427 35.2142 c
196.7285 33.5418 196.1859 31.928 196.1859 30.1514 C
s
177.0471 63.0733 m
177.5577 63.6875 177.7572 64.5232 178.8039 64.6185 c
179.4081 64.6734 179.6939 65.188 180.2133 65.3541 c
181.1199 65.6443 182.0326 65.8771 182.9737 66.0292 c
183.757 66.1558 184.4726 66.3742 185.2911 66.016 c
185.6054 65.8785 185.9097 65.8467 186.246 65.8671 c
187.648 65.9526 188.3749 64.9117 189.4599 64.4802 c
191.0064 63.8652 190.7152 62.5588 191.0059 61.3865 c
191.2601 60.3624 191.3052 59.3044 191.6386 58.2903 c
191.7874 57.8376 191.4827 57.3448 191.9109 56.9087 c
191.9532 56.8656 191.9277 56.8206 191.9307 56.7757 c
192.0042 55.7279 192.7644 52.6586 191.8955 51.5286 c
191.5644 51.0981 191.1494 51.3029 190.758 51.2514 c
190.3927 51.2035 190.1698 50.8812 189.7778 50.8778 c
189.2681 50.8735 188.8819 51.1836 188.4064 51.2555 c
187.3394 51.4165 186.2925 51.2655 185.2355 51.2702 c
182.9212 51.2805 180.6069 51.2745 178.2926 51.2723 c
174.9648 51.2691 175.4792 53.8123 175.9346 56.236 c
176.3611 58.5068 176.972 60.7272 177.0471 63.0733 C
s
181.4033 43.061 m
182.4502 43.061 183.497 43.061 184.5441 43.061 c
184.8656 43.061 185.1873 43.061 185.5089 43.061 c
185.6697 43.061 185.8304 43.061 185.9913 43.061 c
186.7515 43.061 186.8448 42.469 187.1468 42.0032 c
187.7187 41.1215 188.1851 40.1858 188.6827 39.2649 c
189.0612 38.5645 188.1284 38.6955 187.6742 38.6191 c
187.1607 38.5331 186.6479 38.5072 186.1294 38.5014 c
184.0353 38.478 181.9417 38.5068 179.848 38.5078 c
179.5706 38.508 179.2931 38.5081 179.0156 38.5081 c
178.6662 38.5083 179.0316 38.8549 179.1232 39.021 c
179.3681 39.4648 179.5811 39.9229 179.7934 40.3822 c
180.2355 41.3389 180.6491 42.2714 181.4033 43.061 C
s
222.9374 45.3599 m
220.7236 45.3599 218.5278 45.0884 216.3165 45.0604 c
215.1973 45.0462 214.0782 45.0547 212.9591 45.0558 c
212.0308 45.0569 211.813 44.3359 211.338 43.8228 c
210.8396 43.2848 210.3077 43.5631 209.7608 43.5631 c
209.0403 43.5631 208.3198 43.5631 207.5992 43.5631 c
207.3731 43.5631 207.1539 43.4993 207.0512 43.7885 c
206.9467 44.0831 206.8424 44.3777 206.7377 44.6723 c
206.6344 44.9633 206.4244 44.7433 206.2608 44.632 c
206.093 44.5178 205.9734 44.3633 205.8397 44.2183 c
204.9175 43.2188 203.9814 44.1182 203.0562 43.9972 c
202.6052 43.9383 202.1976 43.8381 201.746 44.0874 c
200.9762 44.5127 201.3999 47.9347 201.3999 48.4564 c
201.3999 48.7701 201.3999 49.0836 201.3999 49.3973 c
201.3999 50.2725 201.8926 50.4619 202.6567 50.5316 c
203.3876 50.5984 204.1132 50.6928 204.8365 50.8173 c
205.2467 50.888 205.5801 50.7313 205.945 50.6287 c
206.3516 50.5145 206.5422 50.6966 206.758 51.0003 c
206.8534 51.1347 206.949 51.2691 207.0445 51.4035 c
207.1431 51.5423 207.1519 51.8306 207.4137 51.7068 c
208.1172 51.3745 208.7994 51.4138 209.5269 51.4367 c
210.7426 51.4752 211.5333 50.8462 212.4516 50.2725 c
213.0352 49.908 213.5487 50.2216 214.0984 50.221 c
214.7021 50.2202 215.3058 50.2194 215.9095 50.2194 c
217.0379 50.2194 218.1665 50.2301 219.2951 50.2153 c
220.2856 50.2024 221.2537 50.2071 222.2322 50.4503 c
222.4853 50.5131 222.835 50.3801 222.8949 50.7885 c
222.9477 51.1487 223.0249 51.5009 223.1278 51.8503 c
223.3317 52.5436 223.6196 53.1796 223.9964 53.7953 c
226.0175 57.0982 228.3581 58.1691 232.1456 58.1041 c
233.4965 58.081 234.7886 58.6353 236.1573 57.7256 c
237.659 56.7274 239.1487 55.7147 240.5986 54.6409 c
240.7028 54.5636 240.8187 54.5166 240.9357 54.4668 c
241.4747 54.2373 241.324 53.7524 241.4601 53.3637 c
241.8563 52.2322 242.4974 51.2127 242.6797 49.9805 c
242.8396 48.9007 242.662 47.8704 242.5573 46.8161 c
242.2556 43.7816 241.3665 42.941 239.4934 40.7872 c
238.8618 40.061 238.0132 39.7066 237.2699 39.1707 c
237.1098 39.0552 236.9937 38.9016 236.8584 38.7641 c
236.4151 38.314 235.986 38.6745 235.5451 38.6747 c
234.8183 38.675 234.0914 38.6756 233.3646 38.6758 c
230.8954 38.6767 228.6111 38.1806 226.3787 40.0902 c
224.6586 41.5615 223.3066 42.9288 222.9374 45.3599 C
s
238.1382 54.9991 m
237.4863 53.7127 236.2632 53.1652 235.3429 52.2308 c
234.9036 51.7849 234.7285 51.1821 234.2925 50.7346 c
234.1021 50.5393 233.898 50.3935 233.9027 50.0671 c
233.9206 48.8516 233.8228 47.6419 234.0079 46.4227 c
234.0951 45.8465 234.0893 45.3045 234.5922 44.8491 c
234.9086 44.5624 235.1891 44.2438 235.4773 43.931 c
235.8941 43.4785 236.3138 43.0466 236.8343 42.7024 c
236.9617 42.6182 237.424 42.6836 237.2205 42.4561 c
237.1329 42.358 237.0393 42.2675 236.9393 42.1824 c
236.7402 42.0134 236.5258 41.8753 236.2969 41.7516 c
235.3536 41.2413 234.4801 40.7693 233.3335 40.7815 c
232.1386 40.7943 231.0016 40.7881 229.8535 41.3013 c
229.6075 41.4114 229.3666 41.5316 229.125 41.6506 c
229.0003 41.712 228.8754 41.7733 228.7498 41.8328 c
228.625 41.8921 228.1958 41.8013 228.3756 42.0111 c
228.692 42.3805 229.0075 42.7504 229.324 43.1197 c
229.9449 43.8444 230.5734 44.5624 231.2025 45.2797 c
231.5809 45.7112 231.4859 48.5464 231.4571 48.9728 c
231.3432 50.6686 228.4843 53.2172 227.3953 54.0315 c
227.0885 54.2608 226.7828 54.4189 226.9167 54.8919 c
227.1293 55.6432 227.8098 55.4805 228.2847 55.7319 c
229.446 56.3465 230.5103 56.9369 231.9258 56.889 c
234.2337 56.8111 236.225 56.6025 238.1382 54.9991 C
s
233.1523 41.7088 m
232.582 41.7337 231.8218 41.4628 231.8218 42.3548 c
231.8218 42.9682 231.8958 43.4157 232.4895 43.7572 c
232.9128 44.0008 233.7434 43.5641 233.869 43.1195 c
234.0784 42.3784 233.4613 42.1492 233.1523 41.7088 C
s
233.1234 52.1652 m
232.5532 52.1903 231.7928 51.9194 231.7928 52.8114 c
231.7928 53.4248 231.8669 53.8722 232.4606 54.2137 c
232.8839 54.4572 233.7146 54.0207 233.8402 53.576 c
234.0496 52.8348 233.4325 52.6056 233.1234 52.1652 C
s
246.0886 48.0247 m
245.9976 48.3103 245.9065 48.5958 245.8155 48.8813 c
245.7884 48.9663 245.7613 49.0511 245.7342 49.1361 c
245.6976 49.2515 245.8331 49.0661 245.8783 49.0254 c
245.9497 48.9615 246.0212 48.8977 246.0924 48.8338 c
246.2905 48.6565 247.1402 49.6068 247.2492 49.6878 c
247.5611 49.9199 247.6776 50.1568 247.6397 50.5484 c
247.5971 50.9917 248.0342 50.8642 248.2627 50.9828 c
248.4688 51.0898 248.6245 51.0684 248.8196 50.9581 c
249.2529 50.7134 249.4919 50.9688 249.8029 51.2035 c
250.762 51.9273 251.451 52.825 252.119 53.7933 c
252.9441 54.9892 253.8025 54.8088 254.943 54.2403 c
255.3332 54.0459 255.7865 54.0027 255.8174 53.4113 c
255.8424 52.9353 255.9731 52.6198 256.3971 52.3587 c
256.6286 52.2162 257.561 50.8042 257.9481 50.8042 c
258.2418 50.8042 259.3555 50.9751 259.5597 50.5399 c
259.7757 50.0797 259.9569 49.6134 260.2972 49.2131 c
260.7127 48.7247 261.166 48.3197 261.2799 47.6114 c
261.3755 47.0168 261.6767 46.4845 261.4258 45.8217 c
261.2443 45.3424 261.0693 44.862 260.8456 44.3988 c
260.2312 43.1261 259.5246 42.5303 258.0438 42.6009 c
257.7836 42.6134 257.5236 42.6122 257.2633 42.6085 c
257.1284 42.6065 256.9936 42.6039 256.8588 42.602 c
256.7376 42.6002 256.4958 42.8298 256.4958 42.5877 c
256.4958 42.4736 256.4958 42.3596 256.4958 42.2455 c
256.4958 41.7891 256.4958 41.3327 256.4958 40.8763 c
256.4958 40.5351 256.4958 40.1938 256.4958 39.8526 c
256.4958 39.6 256.5224 39.3832 256.2554 39.225 c
254.318 38.0772 253.956 37.4636 251.7006 38.7058 c
251.5532 38.7871 250.4007 39.1177 250.4315 39.4253 c
250.4874 39.9837 250.5431 40.542 250.599 41.1003 c
250.6365 41.4748 251.1277 42.6342 250.4129 42.5997 c
249.8033 42.5703 249.2181 42.6131 248.6232 42.7609 c
247.7716 42.9725 247.0976 43.4051 246.4178 43.9195 c
246.0036 44.233 245.7787 45.9583 245.7487 46.35 c
245.7018 46.9605 245.8971 47.4772 246.0886 48.0247 C
s
256.9476 44.8144 m
255.7846 45.0301 255.0721 45.4074 255.2325 46.7402 c
255.3827 47.9883 256.0072 48.3657 257.2036 48.3657 c
257.7374 48.3657 258.0572 48.1225 258.4059 47.7738 c
258.7732 47.4066 258.8829 47.0576 258.8015 46.5461 c
258.7291 46.0916 258.9131 45.5799 258.2966 45.3398 c
257.8468 45.1646 257.3972 44.9894 256.9476 44.8144 C
s
252.246 46.6417 m
251.8512 45.6563 251.3418 45.0547 250.2871 44.7315 c
249.6525 44.537 249.4477 45.0766 249.0583 45.3224 c
248.5911 45.6175 248.5671 45.993 248.5671 46.4748 c
248.5671 46.9765 248.708 47.3308 249.0759 47.6782 c
249.4177 48.0012 249.6825 48.3391 250.2368 48.3391 c
251.4787 48.3391 251.688 47.3687 252.246 46.6417 C
s
296.9847 69.6844 m
299.3339 68.3 301.8822 67.6298 302.7171 64.3628 c
303.5839 60.9713 305.188 57.8564 306.023 54.4517 c
306.1282 54.0228 306.4414 53.6882 306.4479 53.2078 c
306.4528 52.837 306.7385 52.5907 306.7537 52.2251 c
306.788 51.3981 306.9974 50.6027 307.0899 49.7871 c
307.1967 48.8441 306.9298 47.9726 306.835 47.0667 c
306.6123 44.9431 306.7551 42.8137 306.5505 40.6902 c
306.458 39.7288 306.3931 38.7729 306.438 37.8044 c
306.4645 37.2313 306.1255 36.7651 306.136 36.1978 c
306.1609 34.8405 305.8146 33.5277 305.8378 32.1706 c
305.8406 32.0139 305.2463 31.1997 305.0664 31.1995 c
304.4334 31.1986 303.8305 31.2825 303.2112 30.9646 c
302.3172 30.5056 301.3761 30.3898 300.423 30.2162 c
299.4525 30.0393 298.7702 29.4697 298.0051 28.9617 c
296.8074 28.1665 296.7673 28.0397 295.2989 27.8668 c
294.9328 27.8237 294.6517 27.5408 294.2365 27.6167 c
293.7465 27.7063 293.2987 27.8617 292.8614 28.1019 c
292.0365 28.5549 291.394 29.2394 290.5856 29.7115 c
290.108 29.9904 289.6208 29.9795 289.1114 30.0147 c
287.7852 30.1066 286.5744 30.5124 285.3373 30.921 c
284.7314 31.121 284.1203 31.2971 283.5008 31.4495 c
282.9528 31.5843 282.5958 31.7609 282.4834 32.3784 c
282.3358 33.1902 282.4645 33.9941 282.4002 34.8013 c
282.3403 35.5546 282.2315 36.3022 282.1594 37.0541 c
282.1236 37.43 282.0969 37.8056 282.0902 38.1835 c
282.0837 38.554 282.3731 38.8817 282.1266 39.2919 c
281.5058 40.3262 282.2659 41.5525 281.2586 42.5409 c
280.7764 43.0142 280.3408 43.3644 279.6019 43.3644 c
279.2591 43.3644 278.9165 43.3644 278.5737 43.3644 c
277.8882 43.3644 277.2026 43.3644 276.5172 43.3644 c
275.8318 43.3644 275.1462 43.3644 274.4607 43.3644 c
274.2435 43.3644 274.0113 43.257 273.8993 43.5521 c
273.3249 45.067 272.3074 45.8491 271.012 44.5401 c
270.7335 44.2586 270.128 43.2348 270.051 43.9743 c
270.0179 44.2923 269.985 44.6103 269.9519 44.9283 c
269.8997 45.4312 269.4658 45.1749 269.1667 45.1746 c
267.783 45.1735 266.436 45.5336 265.0191 45.2708 c
264.2576 45.1297 264.5116 46.9537 264.5139 47.3638 c
264.5196 48.4005 264.5124 49.4372 264.511 50.4739 c
264.5105 50.7353 264.6149 50.9027 264.7905 51.0784 c
265.3136 51.6014 265.8438 50.9922 266.3763 51.2531 c
266.994 51.5558 267.5261 51.2788 268.1021 51.2488 c
268.454 51.2304 268.78 51.1136 269.1199 51.0507 c
269.3519 51.0077 269.3443 51.216 269.4165 51.3491 c
269.5007 51.5044 269.5849 51.6599 269.6691 51.8152 c
269.7635 51.9896 269.8578 52.1639 269.9522 52.3381 c
270.1058 52.622 270.2922 52.337 270.4592 52.2598 c
270.8854 52.0626 271.3117 51.8654 271.7379 51.6682 c
272.1356 51.4843 272.5112 51.5866 272.902 51.5866 c
273.3306 51.5866 273.2822 51.91 273.2822 52.2219 c
273.2822 53.9351 274.9514 52.9355 275.8473 53.1481 c
276.5694 53.3196 277.2996 53.2213 278.0211 53.3473 c
279.0866 53.5332 280.1285 53.3245 281.1829 53.3805 c
281.6076 53.4031 281.8305 53.5461 281.9372 53.973 c
282.1157 54.6866 282.2989 55.3991 282.4882 56.11 c
282.8696 57.5416 283.2756 58.9652 283.7173 60.3796 c
284.5214 62.9545 285.0625 65.452 287.1641 67.5122 c
287.9947 68.3264 288.7603 69.0716 289.9726 69.3725 c
291.0846 69.6484 292.1095 70.159 293.3269 70.1106 c
294.5606 70.0618 295.7696 69.868 296.9847 69.6844 C
s
299.0875 53.4372 m
297.1969 53.183 295.3103 53.0768 293.4045 53.0776 c
291.4865 53.0785 289.7047 52.7005 287.9377 54.1094 c
286.1148 55.5627 285.7515 57.0054 286.2576 59.219 c
286.4426 60.0285 286.6948 60.8177 286.9183 61.6156 c
287.2258 62.7147 287.4442 63.6186 288.7802 63.9146 c
290.6316 64.3248 292.3624 65.0584 294.3759 64.8506 c
295.4368 64.7412 296.4292 64.3894 297.4568 64.1635 c
297.8901 64.068 298.3191 63.9663 298.7376 63.8131 c
299.12 63.673 299.5667 63.8036 299.8799 63.3809 c
302.2507 60.1824 303.1273 55.7699 299.0875 53.4372 C
s
297.9401 40.3828 m
298.39 40.0979 299.1247 40.182 299.1247 39.3615 c
299.1247 39.149 299.1247 38.9365 299.1247 38.724 c
299.1247 38.5357 299.3823 38.1869 299.0242 38.1869 c
298.8116 38.1869 298.5991 38.1869 298.3867 38.1869 c
297.1913 38.1869 295.9958 38.1869 294.8006 38.1869 c
294.3644 38.1869 293.9283 38.1869 293.4921 38.1869 c
292.7295 38.1869 292.0093 38.4116 291.261 38.4786 c
290.941 38.5071 290.6225 38.4995 290.3027 38.4934 c
290.1677 38.4908 289.5135 38.2669 289.4781 38.5292 c
289.4648 38.6279 289.4516 38.7264 289.4384 38.8249 c
289.4043 39.0803 290.5209 39.4109 290.5941 39.5815 c
291.0745 40.7021 291.0357 41.9113 291.4411 43.041 c
291.567 43.3917 291.7356 43.7234 291.8703 44.07 c
292.0835 44.6191 292.5379 44.2703 292.8917 44.3023 c
293.3383 44.3425 293.7847 44.3827 294.2311 44.423 c
294.8409 44.4779 295.4506 44.5329 296.0603 44.5878 c
296.1809 44.5988 296.8692 44.8358 296.9654 44.6336 c
297.0827 44.3868 297.1926 44.1371 297.2938 43.8832 c
297.7492 42.7389 297.982 41.6233 297.9401 40.3828 C
s
288.8553 31.981 m
288.492 32.5444 288.4134 33.0594 288.533 33.7098 c
288.6264 34.2191 289.7639 34.5222 290.0014 34.0321 c
290.2708 33.4758 290.3073 32.9112 290.3478 32.3204 c
290.4167 31.3145 289.3183 32.4448 288.8553 31.981 C
s
298.0191 34.1101 m
299.6556 35.0388 299.4184 33.6994 299.4184 32.3715 c
299.4184 31.5805 298.6286 32.3714 298.2718 32.6767 c
297.7546 33.1194 297.7323 33.5232 298.0191 34.1101 C
s
300.3194 37.9126 m
299.8 38.168 298.7733 38.9921 299.6552 39.0609 c
299.9209 39.0815 300.3194 39.2889 300.3194 38.8456 c
300.3194 38.5345 300.3194 38.2235 300.3194 37.9126 C
s
96.9983 69.1598 m
101.4291 64.7021 102.1763 61.9638 104.6901 56.4769 c
105.6529 54.3753 106.9439 52.5002 107.1071 50.0147 c
107.2832 47.3313 107.0083 44.6568 107.1693 41.974 c
107.2222 41.0914 107.3561 40.2449 107.6392 39.4019 c
107.7151 39.176 107.803 38.9647 107.7827 38.7123 c
107.7617 38.45 107.879 38.2848 108.0254 38.0972 c
108.3507 37.68 108.6758 37.2629 109.0009 36.8457 c
109.7936 35.8283 109.1031 35.012 108.9358 34.0843 c
108.8283 33.4895 108.721 32.8946 108.6136 32.2998 c
108.5137 31.7458 108.771 31.167 108.2672 30.6483 c
107.4316 29.7877 106.4775 30.0775 105.5312 29.9553 c
104.2647 29.7915 103.4772 28.8199 102.3155 28.4999 c
101.083 28.1603 99.8266 27.9416 98.5815 27.6655 c
96.8689 27.2854 95.1863 27.1703 93.4384 27.2783 c
92.6422 27.3274 91.8885 27.6085 91.0724 27.5728 c
90.223 27.5357 89.5122 27.9992 88.6765 28.0016 c
87.1682 28.0063 86.1184 28.8623 84.8756 29.3999 c
83.8146 29.8589 82.7295 30.1934 81.6046 30.4496 c
81.1918 30.5435 80.7608 30.4496 80.3754 30.7648 c
80.1428 30.9551 80.2099 31.2038 80.1489 31.4315 c
79.8929 32.3892 79.534 33.3143 79.3239 34.2876 c
79.2357 34.696 78.7922 35.9847 78.9247 36.4635 c
79.0567 36.9398 79.343 37.3017 79.6049 37.6943 c
79.7439 37.9026 79.8872 38.1079 80.0281 38.3148 c
80.1194 38.449 80.5853 38.6264 80.2788 38.7306 c
80.0906 38.7946 79.8041 38.8083 79.9384 39.0855 c
80.0412 39.2983 80.041 39.8861 80.3718 39.5904 c
80.4502 39.5204 80.5037 39.3566 80.6353 39.473 c
81.0919 39.8766 80.8708 40.7798 80.9272 41.2131 c
81.0483 42.1458 81.0757 43.0704 81.0292 44.0085 c
80.9689 45.2243 81.4704 46.3474 81.3496 47.5773 c
81.1822 49.2799 81.0819 50.8553 81.7789 52.5237 c
83.0608 55.5921 84.4155 58.621 85.9104 61.5932 c
86.9715 63.7028 87.1691 64.0311 88.6716 65.8562 c
89.3357 66.6628 89.7628 67.6258 90.5889 68.3321 c
91.1991 68.8538 91.9004 68.7768 92.5758 68.9412 c
93.2959 69.1166 94.0255 69.2457 94.7354 69.4683 c
95.5933 69.7372 96.2429 69.2539 96.9983 69.1598 C
s
95.8266 54.6727 m
94.9317 54.6727 94.0368 54.6675 93.1418 54.6755 c
91.6299 54.689 91.9712 55.2149 91.9561 56.3996 c
91.9447 57.2947 91.9303 58.1864 92.0154 59.0811 c
92.0571 59.521 92.2036 61.2652 92.8432 61.4885 c
93.714 61.7925 94.6114 61.4754 95.4845 61.8675 c
95.9889 62.0939 96.0235 61.5766 96.2048 61.2879 c
96.4962 60.8242 96.515 60.3631 96.5119 59.8507 c
96.5062 58.933 96.7607 55.5366 95.8266 54.6727 C
s
93.8511 34.2108 m
92.2934 35.2036 90.7355 36.1963 89.1777 37.1888 c
88.9296 37.3471 89.4026 37.8604 89.6467 37.8646 c
90.2677 37.875 90.8474 37.7818 91.4358 37.5858 c
92.3416 37.2843 93.2089 37.1691 94.1639 37.2787 c
95.0838 37.3843 95.9819 37.5937 96.8892 37.7613 c
97.286 37.8347 97.6424 37.9876 98.0686 37.7858 c
98.4968 37.5829 99.1901 37.3575 98.6697 36.8511 c
97.2634 35.4825 95.6952 34.7426 93.8511 34.2108 C
s
101.9544 42.0137 m
102.0964 43.4408 101.904 44.8558 101.9765 46.2784 c
102.0132 46.9974 102.1135 47.6872 102.3429 48.3749 c
102.5119 48.8815 102.9215 48.4999 103.2239 48.4999 c
103.6643 48.4999 103.8711 48.2963 104.0761 47.9442 c
104.1087 47.8879 104.1213 47.8348 104.1149 47.7698 c
104.0505 47.1181 104.0904 46.4704 104.0949 45.8203 c
104.0996 45.1063 104.1558 44.4024 104.2683 43.6969 c
104.3165 43.3955 104.3702 43.0949 104.4212 42.794 c
104.5051 42.2992 104.2145 42.1273 103.8714 41.8998 c
103.1451 41.4182 102.6221 41.5088 101.9544 42.0137 C
s
86.4871 42.5677 m
86.2857 42.2897 86.0842 42.0117 85.8827 41.7337 c
85.6437 41.4038 85.3962 41.5473 85.1046 41.66 c
84.7081 41.8131 84.3869 41.9292 84.3869 42.4453 c
84.3869 42.6854 84.3869 42.9256 84.3869 43.1657 c
84.3869 43.8317 84.3869 44.4978 84.3869 45.1637 c
84.3869 45.4909 84.3869 45.8182 84.3869 46.1454 c
84.3869 46.4822 84.2057 46.7967 84.413 47.1546 c
84.6379 47.5428 84.5362 48.1771 85.2396 48.1771 c
85.4337 48.1771 85.6278 48.1771 85.8221 48.1771 c
85.9332 48.1771 86.204 48.378 86.1543 48.1619 c
86.0222 47.5868 86.3502 47.0952 86.2628 46.531 c
86.1555 45.8387 86.3775 45.2183 86.4614 44.5641 c
86.5471 43.8955 86.4871 43.2333 86.4871 42.5677 C
s
331.1987 61.7899 m
330.3526 59.9263 329.0289 59.8095 327.2637 59.8095 c
326.477 59.8095 325.7279 59.4608 324.9438 60.0597 c
324.313 60.5414 323.592 60.8146 323.6482 61.8399 c
323.782 64.2806 325.7021 63.7386 327.3861 63.7388 c
328.1876 63.7389 328.969 63.8818 329.7809 63.6164 c
330.7435 63.3018 330.679 62.365 331.1987 61.7899 C
s
320.8164 63.7345 m
322.7758 63.0866 323.6056 61.5104 321.7261 60.2218 c
320.979 59.7097 320.2376 59.7939 319.4329 59.7998 c
318.6339 59.8055 317.8474 59.6574 317.0361 59.8278 c
316.3717 59.9674 315.9386 60.3254 315.4977 60.7958 c
315.3757 60.9261 315.128 60.9276 315.1399 61.1934 c
315.179 62.0696 315.2921 62.7446 316.0942 63.2982 c
316.9502 63.8889 319.9706 63.7345 320.8164 63.7345 C
s
320.0943 33.9904 m
320.0355 34.1486 319.9769 34.3068 319.9179 34.4651 c
319.8474 34.6549 319.1408 34.4111 319.0361 34.3974 c
318.6874 34.3515 318.3391 34.3085 317.9878 34.2871 c
317.1674 34.2373 316.4028 33.9139 315.5602 33.9499 c
314.452 33.9973 314.2785 34.6516 314.2785 35.6121 c
314.2785 36.5185 314.4047 37.1463 315.3557 37.5178 c
316.5177 37.9716 319.0345 38.0571 320.2192 37.5977 c
321.1417 37.2398 321.4806 36.7255 321.4806 35.741 c
321.4806 35.5478 321.4806 35.3546 321.4806 35.1614 c
321.4806 34.5348 320.4228 34.2174 320.0943 33.9904 C
s
329.4208 34.257 m
328.6095 34.3275 327.8086 34.1211 326.9837 34.3835 c
326.7551 34.4562 326.6147 34.2868 326.4254 34.2565 c
325.5622 34.1186 325.4758 34.7606 325.2472 35.3602 c
324.8462 36.4126 325.5104 36.8539 326.1355 37.467 c
326.4976 37.8221 326.9177 37.7671 327.3376 37.841 c
327.7298 37.9101 328.1212 37.9368 328.5185 37.9403 c
330.2425 37.9557 331.9452 38.4858 332.6742 36.2309 c
332.75 35.9971 332.7945 35.7895 332.7073 35.5417 c
332.6202 35.2941 332.6935 34.6179 332.2988 34.9192 c
331.9976 35.149 331.8246 34.9022 331.5998 34.762 c
330.9008 34.3255 330.1666 34.3563 329.4208 34.257 C
s
334.5111 38.8154 m
333.9608 36.8285 334.3185 34.6998 332.42 33.0331 c
330.9407 31.7346 327.9068 31.9497 326.3066 31.9733 c
324.1927 32.0042 322.0792 31.9776 319.9655 31.9776 c
317.811 31.9776 315.8573 31.5837 314.0744 33.4972 C
S
333.6151 48.9548 m
333.6151 54.7115 328.948 59.3786 323.1911 59.3786 c
317.4342 59.3786 312.7672 54.7118 312.7672 48.9548 c
312.7672 43.1977 317.4342 38.5308 323.1911 38.5308 c
328.948 38.5308 333.6151 43.1979 333.6151 48.9548 C
s
55.4606 48.4697 m
55.7297 48.7388 55.9989 49.008 56.2681 49.2773 c
56.7593 49.7684 57.3245 49.6287 57.8814 49.7172 c
58.3667 49.7944 58.8576 49.6978 59.3405 49.9258 c
59.7813 50.1339 59.9975 50.5578 60.3844 50.8125 c
60.8599 51.1256 62.5845 49.9693 62.9084 49.8542 c
63.414 49.6745 63.932 49.6111 64.4555 49.5392 c
64.8811 49.4807 65.2208 49.433 65.4062 48.9614 c
65.5307 48.6446 66.1169 48.0203 65.4873 48.0203 c
65.3141 48.0203 65.141 48.0203 64.9679 48.0203 c
64.6216 48.0203 64.2754 48.0203 63.9292 48.0203 c
62.9769 48.0203 62.0247 48.0203 61.0725 48.0203 c
60.3472 48.0203 56.2002 47.8825 55.4606 48.4697 C
s
289.0736 37.7887 m
288.6817 37.7322 288.3296 37.6365 288.1758 38.1313 c
288.1118 38.337 287.9097 39.0529 288.277 39.0695 c
288.5796 39.0832 289.0736 39.3772 289.0736 38.8459 c
289.0736 38.4934 289.0736 38.141 289.0736 37.7887 C
s
57.3307 35.5607 m
57.0753 35.5607 55.9452 35.1724 56.024 35.6731 c
56.0466 35.817 56.0658 35.9613 56.0786 36.1066 c
56.1057 36.4112 56.0894 36.7141 56.0854 37.0181 c
56.0761 37.7179 56.0823 38.3599 56.9834 38.2993 c
57.1221 38.2899 57.2582 38.2622 57.3998 38.2773 c
57.5831 38.297 58.1412 38.377 57.8377 38.4997 c
57.3337 38.7036 56.7931 38.6515 56.2879 38.8409 c
55.5706 39.1102 54.6639 39.4959 55.421 40.2628 c
55.5568 40.4004 55.7038 40.3425 55.8542 40.3499 c
57.2226 40.4172 58.5906 40.4329 59.9601 40.4324 c
61.4812 40.4319 63.0023 40.4112 64.5236 40.4196 c
65.0386 40.4226 65.8743 40.7769 65.7759 39.9141 c
65.745 39.6428 65.6452 39.4242 65.489 39.2056 c
65.3326 38.9869 65.1437 38.8026 64.9553 38.6145 c
64.8562 38.5155 64.7572 38.4164 64.6619 38.3133 c
64.5696 38.2132 64.1303 37.9997 64.4019 37.9997 c
64.5397 37.9997 64.6775 37.9997 64.8152 37.9997 c
65.1334 37.9997 65.4516 37.9997 65.7698 37.9997 c
66.4827 37.9997 65.8906 37.2934 65.8914 36.9302 c
65.8921 36.5431 65.8863 36.1597 65.9552 35.7742 c
66.0162 35.4331 66.2494 35.1382 66.0273 34.7491 c
65.8606 34.4571 65.6417 34.5283 65.4653 34.7751 c
65.2372 35.094 64.996 35.238 64.5974 35.2458 c
63.6805 35.2638 62.7891 35.4248 61.8895 35.5617 c
60.3532 35.7953 58.8502 35.5607 57.3307 35.5607 C
s
71.7152 45.4695 m
72.1051 47.2677 72.5266 48.746 70.948 50.2861 c
70.1641 51.0508 69.2033 51.2969 68.2582 51.6767 c
68.059 51.7567 67.8987 51.7033 67.7154 51.6431 c
67.5938 51.6031 67.472 51.5631 67.3503 51.5231 c
66.8178 51.3484 67.1489 50.9172 67.1503 50.5821 c
67.1577 48.8797 67.1688 47.1772 67.1549 45.4746 c
67.1496 44.8223 66.8177 44.2692 66.761 43.6355 c
66.7156 43.1289 67.0026 42.7675 67.1322 42.3359 c
67.2288 42.0137 67.0078 41.7416 67.1032 41.4195 c
67.173 41.1843 67.4583 40.9921 67.2093 40.7056 c
67.1008 40.5809 67.1085 40.481 67.1879 40.3451 c
67.4026 39.9775 67.4546 39.6175 67.442 39.2042 c
67.4303 38.8155 67.2074 38.6011 66.9839 38.3431 c
66.8706 38.2123 66.4155 38.0408 66.7253 37.9106 c
66.8522 37.8573 66.979 37.8039 67.1058 37.7507 c
67.7413 37.4835 67.4242 36.973 67.4242 36.5239 c
67.4242 36.3943 67.4242 36.2645 67.4242 36.1347 c
67.4242 35.7202 67.8195 36.0016 68.046 36.0359 c
68.2968 36.0739 68.4861 36.2573 68.7561 36.2573 c
69.7997 36.2573 70.6999 36.1734 71.4802 37.1348 c
73.0535 39.0738 71.4737 40.0918 70.1378 41.3316 c
69.5962 41.8342 69.9229 42.3616 69.9229 42.8985 c
69.9229 43.1323 69.9229 43.3663 69.9229 43.6001 c
69.9229 44.8769 71.1241 44.8403 71.7152 45.4695 C
s
70.2144 39.4948 m
70.1081 39.2222 70.0017 38.9496 69.8953 38.677 c
69.7118 38.2068 71.0249 38.369 70.5264 38.2129 c
70.2472 38.1256 69.968 38.0382 69.6888 37.9506 c
69.4771 37.8844 68.8863 37.4728 69.0489 37.8707 c
69.1509 38.1207 69.4443 38.3541 69.1089 38.6107 c
68.8937 38.7754 68.5289 38.8275 68.6781 39.2202 c
68.7396 39.3825 69.4614 39.1523 69.5511 39.1442 c
69.8742 39.1149 69.8428 39.7142 70.2144 39.4948 C
s
70.6343 47.873 m
70.3876 47.3367 70.1924 46.8928 70.4949 46.2883 c
70.6691 45.9399 70.1107 46.2396 69.9107 46.3064 c
69.543 46.429 69.3626 46.2553 69.1426 46.0061 c
68.9439 45.7811 68.6424 47.3705 68.9319 47.4437 c
69.4993 47.5867 70.0668 47.7298 70.6343 47.873 C
s
51.2804 47.7791 m
51.5322 47.2452 51.7317 46.8033 51.4351 46.1959 c
51.2642 45.8457 51.8197 46.151 52.0191 46.2196 c
52.3854 46.3458 52.5677 46.1739 52.7899 45.9269 c
52.9908 45.7038 53.2771 47.296 52.9868 47.3662 c
52.4179 47.5038 51.8491 47.6415 51.2804 47.7791 C
s
51.7814 39.4055 m
51.8904 39.1339 51.9994 38.8623 52.1083 38.5907 c
52.2964 38.1224 50.9819 38.2719 51.4819 38.1207 c
51.7619 38.0359 52.0418 37.9512 52.322 37.8664 c
52.5343 37.8022 53.129 37.3963 52.9626 37.7928 c
52.8581 38.0417 52.5624 38.2722 52.8954 38.5322 c
53.109 38.6987 53.4734 38.7546 53.3204 39.1457 c
53.2571 39.3075 52.5376 39.0703 52.4479 39.0614 c
52.1253 39.0289 52.1508 39.6283 51.7814 39.4055 C
s
50.2227 45.3653 m
49.8153 47.1597 49.3797 48.6338 50.9431 50.1891 c
51.7195 50.9615 52.678 51.2167 53.6195 51.6056 c
53.8179 51.6876 53.9786 51.6359 54.1624 51.5774 c
54.2846 51.5386 54.4066 51.4997 54.5287 51.461 c
55.0628 51.2914 54.736 50.857 54.7377 50.5219 c
54.747 48.8195 54.7524 47.117 54.7827 45.4146 c
54.7944 44.7624 55.1316 44.2126 55.1944 43.5795 c
55.2446 43.0732 54.9612 42.7091 54.8359 42.2763 c
54.7424 41.9532 54.966 41.6832 54.8737 41.3603 c
54.8062 41.1245 54.5229 40.9293 54.7747 40.6454 c
54.8843 40.5218 54.8777 40.4218 54.7995 40.2851 c
54.5883 39.9154 54.5399 39.5549 54.5564 39.1419 c
54.572 38.7532 54.7968 38.5409 55.0228 38.2853 c
55.1375 38.1555 55.5942 37.9883 55.2857 37.8552 c
55.1593 37.8007 55.0331 37.7461 54.9068 37.6916 c
54.274 37.418 54.5958 36.9108 54.6003 36.4617 c
54.6015 36.3321 54.6027 36.2023 54.604 36.0727 c
54.608 35.6582 54.2101 35.9356 53.9832 35.9677 c
53.7321 36.0033 53.541 36.1849 53.271 36.1823 c
52.2275 36.1721 51.3281 36.0795 50.5386 37.0334 c
48.9465 38.9568 50.5164 39.99 51.8402 41.2428 c
52.3768 41.7508 52.0451 42.2749 52.0398 42.8118 c
52.0375 43.0456 52.0354 43.2795 52.0331 43.5134 c
52.0208 44.7901 50.8198 44.7418 50.2227 45.3653 C
s
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
